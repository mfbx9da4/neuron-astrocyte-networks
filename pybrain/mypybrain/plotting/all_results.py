from numpy import array, mean, std, sqrt
from collections import OrderedDict
import numpy as np
import matplotlib.pyplot as plt

iris = OrderedDict(
        {'BNN_TRN': array([  1.37235199,   5.23136473,  10.6808904 ,   0.50393465,
                 7.26737766,   7.84060007,   7.73717644,   0.7540379 ,
                 8.89864029,  -1.68068725,  17.17469598,   3.66280602,
                12.50728359,   6.74424588,   1.42874343,   5.53453171,
                -3.10654194,  15.38699064,   4.60214925,   5.4551868 ]),
         'BNN_TST': array([  1.63786989,  -8.38971225,   9.35623245,   3.08728952,
                19.30318959,  10.12154966,  10.91108251,   4.33825132,
                 7.44398465,  26.05253058,  11.72341117,  16.45808754,
                25.38414956,  14.99330017,  -0.52529809,   8.87149992,
                 1.05828559,   1.9422772 ,   7.28403375,  20.71648509]),
         'PPM_TRN': array([  5.9409264 ,  18.46910892,  21.63929002,  37.87886655,
                28.325801  ,  13.40150497,  36.12966021,   9.10232218,
                -2.1765879 ,   3.40742614,  12.94712374,  12.87805121,
                 3.78618792,   5.63134863,   6.3374578 ,  -2.71304334,
                14.29415455,   3.17483351,   9.275599  ,   3.14094976]),
         'PPM_TST': array([  2.57290498,  10.61804055,   7.96506814,  23.72851506,
                 6.40126406,  23.63529145,  23.78148617,   4.25270289,
                 7.31534609,  10.97176353,  11.02278011,  10.18416101,
                 0.58510395,  -2.00678884,  27.51639693,   1.74989894,
                16.52339974,  12.95166981,  24.66872025,  11.61130019]),
         'RAP_TRN': array([ 71.80433481,  66.44228813,  85.64779385,  81.09204619,
        59.26663959,  54.35174309,  60.16745019,  66.77497225,
        57.26820371,  66.45134528,  77.89894469,  43.56512555,
        59.27850389,  56.92302177,  69.69415589,  54.25985054,
        56.25633865,  59.25750316,  76.88056977,  73.77233327]),
         'RAP_TST': array([ 66.24213176,  58.3110942 ,  72.33669343,  66.72301753,
        69.15415053,  63.78402583,  56.04635969,  56.66244162,
        51.47377868,  75.49842722,  69.61468583,  77.67804595,
        78.38444969,  84.27463307,  68.38541257,  72.48668592,
        71.45007471,  76.48789865,  60.5934294 ,  75.0499969 ])})
parity= OrderedDict(
        {'BNN_TRN': array([ 11.7935158 ,   4.70839769,  12.8888478 ,  -2.9205321 ,
                 4.84229386,   5.17363231,   3.04175062,   1.17684054,
                 6.53152881,   2.05943055,   2.84321873,  11.02225103,
                 1.75122955,  10.27343526,   5.63567657,   1.18615737,
                 1.18976119,   3.63711132,   3.59105435,   0.35574288]),
         'BNN_TST': array([ 1.3,  1.3,  1.3,  1.3,  1.3,  1.3,  1.3,  1.3,  1.3,  1.3,  1.3,
                1.3,  1.3,  1.3,  1.3,  1.3,  1.3,  1.3,  1.3,  1.3]),
         'PPM_TRN': array([  7.31811374,   0.59251489,   7.64354697,   7.08451131,
         8.19550765,   5.94582034,   4.09917497,   1.60058585,
        11.56428549,  10.46070786,   6.90985947,   5.97241091,
        10.79528127,  11.78998228,   5.97359423,   2.00290429,
         7.5454948 ,  15.10825462,   4.13099612,   9.82172503]),
         'PPM_TST': array([ 13.45463536,   6.9688231 ,   1.45206219,   3.10035266,
        13.47029969,   2.09877667,   1.1919826 ,   4.91704348,
        -7.60980025,  -5.06884327,   3.2350437 ,   2.50510023,
         7.89808132,   2.08229016,  -3.76385657,  13.26873852,
         9.04861924,   9.32432877,   7.87941614,   6.47152553]),
         'RAP_TRN': array([ 55.43611061,  56.48097821,  39.55619658,  53.38732176,
        40.70973519,  47.08225702,  48.5112689 ,  52.09103087,
        56.94504668,  49.74013471,  50.06691348,  58.68811895,
        47.14907131,  31.98541868,  46.79463947,  68.72868229,
        60.80728149,  55.5730536 ,  37.35239307,  55.39781896]),
         'RAP_TST': array([ 53.53750682,  47.09461129,  63.93110051,  47.21848603,
        59.37795502,  68.61845939,  50.95504905,  51.60309581,
        60.44064142,  48.52095132,  46.60092377,  65.20537606,
        53.81063586,  40.93962508,  41.02150983,  63.26786866,
        57.40935411,  37.06431719,  47.14260311,  33.80233112])})

def drawBar(trn_means, trn_se, tst_means, tst_se, legend=False):
    N = 3
    ind = np.arange(N)  # the x locations for the groups
    width = .4       # the width of the bars

    fig = plt.figure(facecolor='white')
    ax = fig.add_subplot(111)
    trn_bars = ax.bar(ind, trn_means, width, color='#3366CC', ecolor='#000000', yerr=trn_se)
    tst_bars = ax.bar(ind+width, tst_means, width, color='#DC3912', ecolor='#000000', yerr=tst_se)

    # add some
    ax.set_ylabel('Percentage error (%)')
    ax.set_xticks(ind+width)
    ax.set_xticklabels(('BNN', 'PPM', 'RAP'))
    if legend:
        ax.legend((trn_bars[0], tst_bars[0]), ('Final training', 'Test'), loc='upper left')

    # rect = trn_bars[2]
    # height = rect.get_height()
    # ax.text(rect.get_x()+rect.get_width()/2., 1.05*height, '**',
    #                 ha='center', va='bottom')

def main():
    for i, data in enumerate([parity, iris]):
        trn_means, trn_se, tst_means, tst_se = [], [], [], []
        trn_means.append(mean(data['BNN_TRN']))
        trn_se.append(sqrt(std(data['BNN_TRN'])))
        trn_means.append(mean(data['PPM_TRN']))
        trn_se.append(sqrt(std(data['PPM_TRN'])))
        trn_means.append(mean(data['RAP_TRN']))
        trn_se.append(sqrt(std(data['RAP_TRN'])))

        tst_means.append(mean(data['BNN_TST']))
        tst_se.append(sqrt(std(data['BNN_TST'])))
        tst_means.append(mean(data['PPM_TST']))
        tst_se.append(sqrt(std(data['PPM_TST'])))
        tst_means.append(mean(data['RAP_TST']))
        tst_se.append(sqrt(std(data['RAP_TST'])))

        drawBar(trn_means, trn_se, tst_means, tst_se, legend=i)
    plt.show()

if __name__ == '__main__':
        main()